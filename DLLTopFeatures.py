
from common import *
import numpy as np
import pickle
import xgboost
import sys

from sklearn.feature_selection import SelectKBest, f_regression, SelectFromModel, chi2
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV, KFold, cross_val_score
from sklearn.preprocessing import normalize

import XGBModel

main_path = os.path.join(root_path, "train")
dll_matrix_path = os.path.join(main_path, dll_matrix_path)
opcode_matrix_path = os.path.join(main_path, opcode_matrix_path)
section_matrix_path = os.path.join(main_path, section_matrix_path)
stdcall_matrix_path = os.path.join(main_path, stdcall_matrix_path)
byte1g_matrix_path = os.path.join(main_path, byte1g_matrix_path)
byte1f_matrix_path = os.path.join(main_path, byte1f_matrix_path)
byte2g_matrix_path = os.path.join(main_path, byte2g_matrix_path)
byte4g_matrix_path = os.path.join(main_path, byte4g_matrix_path)
byte_image_matrix_path = os.path.join(main_path, byte_image_matrix_path)

dll_matrix = np.load(dll_matrix_path)
print(dll_matrix.shape)
rfc = RandomForestClassifier(n_estimators=500, random_state=0, verbose=1, n_jobs=12)
rfc.fit(dll_matrix, train_label)
sfm = SelectFromModel(rfc, threshold=0.002)
sfm.fit(dll_matrix, train_label)
importances = rfc.feature_importances_
np.save(dll_feature_importance_path, importances)
pickle.dump(sfm, open(dll_sfm_path, "wb"))