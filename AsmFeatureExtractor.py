# Code that extracts info from disassembled files

from Grebber import chunks
import Reader as r
import os
from common import *
from multiprocessing import Process
import pickle
from progressbar import Percentage, Bar, ProgressBar, ETA
import sys


# Extracts info from disassembled code
def extractAssemblyFeatures(code):
    opcodeDict = {i:0 for i in opcodeList}
    DLLDict = {i:0 for i in DLLList}
    sectionDict = {i:0 for i in sectionList}
    rowCount = 0

    for row in code:
        # Opcode information
        if row.startswith(".text"):
            for item in row.split()[1:]:
                if item in opcodeDict:
                    opcodeDict[item] += 1

        # DLL information
        if row.startswith(".idata") and 'Imports from' in row and '.dll' in row:
            DLLName = row[row.index('from'):row.index('.dll')].strip().split(" ")[-1].lower()
            if DLLName in DLLDict:
                DLLDict[DLLName] += 1

        # Section length information
        sectionName = row.split(":")[0].lower()
        rowCount += 1
        if sectionName in sectionDict:
            sectionDict[sectionName] = sectionDict.get(sectionName, 0) + 1

    for key in sectionList:
        sectionDict[key] = sectionDict[key]/rowCount

    return opcodeDict, DLLDict, sectionDict

# Function to run for each worker
def worker(chunk, sect_dir, opcode_dir, dll_dir):
    widgets = ['Worker {}: '.format(chunk[0]), ' ', Percentage(), ' ', Bar(), ' ', ETA()]
    pbar = ProgressBar(widgets=widgets, maxval=len(chunk[1])).start()
    for idx, item in enumerate(chunk[1]):
        # Filenames
        fn = item.split(os.sep)[-1].split(".")[0]

        # Read asm code
        asm = r.readAsmCode(item)

        # Extract features
        opcodeDict, DLLDict, sectionDict = extractAssemblyFeatures(asm)

        # Save features
        pickle.dump(opcodeDict, open(os.path.join(opcode_dir, fn), "wb"))
        pickle.dump(DLLDict, open(os.path.join(dll_dir, fn), "wb"))
        pickle.dump(sectionDict, open(os.path.join(sect_dir, fn), "wb"))

        # Update progressbar
        pbar.update(idx+1)
    pbar.finish()

if __name__ == "__main__":
    print("ASM feature extractor started!")

    # Which dataset? Train or test?
    if sys.argv[1] == "train":
        main_path = os.path.join(root_path, "train")
        split_data = chunks(train_asm, numWorkers)
    else:
        main_path = os.path.join(root_path, "test")
        split_data = chunks(test_asm, numWorkers)

    # Directory name
    sect_dir = os.path.join(main_path, sectionhist_feat_dir)
    opcode_dir = os.path.join(main_path, opcode_feat_dir)
    dll_dir = os.path.join(main_path, dll_feat_dir)

    clearPath(sect_dir)
    clearPath(opcode_dir)
    clearPath(dll_dir)

    # Multi threading
    jobs = []
    for item in enumerate(split_data):
        p = Process(target=worker, args=(item, sect_dir, opcode_dir, dll_dir))
        jobs.append(p)
        p.start()

    for j in jobs:
        j.join()

    print("ASM feature extractor completed!")
