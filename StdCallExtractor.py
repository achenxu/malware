# StdCall Extractor
# This code reads the file who has the rows containing __stdcall and extracts corresponding
# function name from each call

from Grebber import chunks
import Reader as r
import os
from common import *
from multiprocessing import Process
import pickle
from progressbar import Percentage, Bar, ProgressBar, ETA
import sys
    
# Extract name of the function call from each row
def getCallNames(fn):
    text = r.readAsmCode(fn)
    callDict = {}
    
    for row in text:
        if "(" in row:
            callName = row.split("__stdcall")[1].strip().split("(")[0]
            callDict[callName] = callDict.get(callName, 0) + 1
    return callDict
    
# Each worker initiates by themselves    
def worker(chunk, output_dir):
    # My precious progress bar
    widgets = ['Worker {}: '.format(chunk[0]), ' ', Percentage(), ' ', Bar(), ' ', ETA()]
    pbar = ProgressBar(widgets=widgets, maxval=len(chunk[1])).start()
    for idx, item in enumerate(chunk[1]):
        # Filenames
        fn = item.split(os.sep)[-1].split(".")[0]
        
        # Extract features
        callDict = getCallNames(item)
        
        # Save features
        pickle.dump(callDict, open(os.path.join(output_dir, fn), "wb"))
        
        # Update progressbar
        pbar.update(idx+1)
    pbar.finish()
        
    
if __name__ == "__main__":
    print("StdCall Extractor started!")
    
    # Training set or test set?
    if sys.argv[1] == "train":
        main_path = os.path.join(root_path, "train")
    else:
        main_path = os.path.join(root_path, "test")
    
    # Generate paths
    data_dir = os.path.join(main_path, os.path.join("data", "stdcall"))
    data = [os.path.join(data_dir, file) for file in os.listdir(data_dir) if os.path.isfile(os.path.join(data_dir, file))]
    
    split_data = chunks(data, numWorkers)
    
    # Directory name
    output_dir = os.path.join(main_path, stdcall_feat_dir) 
     
    clearPath(output_dir)
        
    # Parallel threading
    jobs = []
    for item in enumerate(split_data):
        p = Process(target=worker, args=(item, output_dir))
        jobs.append(p)
        p.start()
        
    for j in jobs:
        j.join()        
        
    print("StdCall Extractor completed!")