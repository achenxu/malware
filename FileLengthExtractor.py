# Code that extracts info on file lengths

from Grebber import chunks
import Reader as r
import os
from common import *
from multiprocessing import Process
import pickle
from progressbar import Percentage, Bar, ProgressBar, ETA
import sys
    
# Extracts info on file lengths
def extractLengthFeatures(code, bytes):
    asmLength = len(code)/1024
    byteLength = len(bytes)/1024
    ratio = len(code)/len(bytes)
        
    return [asmLength, byteLength, ratio]
    
# Function to run for each worker
def worker(chunk, output_dir):
    widgets = ['Worker {}: '.format(chunk[0]), ' ', Percentage(), ' ', Bar(), ' ', ETA()]
    pbar = ProgressBar(widgets=widgets, maxval=len(chunk[1])).start()
    for idx, item in enumerate(chunk[1]):
        # Filenames
        fn = item.split(os.sep)[-1].split(".")[0]
        
        # Read asm code
        asm = r.readAsmCode(item)
        bytes = r.readBytes(item.split(".")[0]+".bytes")
        
        # Extract features
        feat = extractLengthFeatures(asm, bytes)
        
        # Save features
        pickle.dump(feat, open(os.path.join(output_dir, fn), "wb"))
        
        # Update progressbar
        pbar.update(idx+1)
    pbar.finish()
    
if __name__ == "__main__":
    print("File Length extractor started!")
    
    # Which dataset? Train or test?
    if sys.argv[1] == "train":
        main_path = os.path.join(root_path, "train")
        split_data = chunks(train_asm, numWorkers)
    else:
        main_path = os.path.join(root_path, "test")
        split_data = chunks(test_asm, numWorkers)
    
    # Directory name
    output_dir = os.path.join(main_path, length_feat_dir)
    
    clearPath(output_dir)
        
    # Multi threading
    jobs = []
    for item in enumerate(split_data):
        p = Process(target=worker, args=(item, output_dir))
        jobs.append(p)
        p.start()
    
    for j in jobs:
        j.join()
        
    print("File length extractor completed!")
        